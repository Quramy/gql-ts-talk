(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{13:function(e,n,t){t(14),t(38),e.exports=t(35)},32:function(e,n,t){var a={"./00-title.md":33,"./10-main.md":34};function r(e){var n=l(e);return t(n)}function l(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=l,e.exports=r,r.id=32},33:function(e,n,t){"use strict";t.r(n),t.d(n,"slides",function(){return u}),t.d(n,"fusumaProps",function(){return c}),t.d(n,"default",function(){return m});var a=t(2),r=t.n(a),l=t(1);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h1",null,"GraphQL and TypeScript"))}],c=[{}],s={slides:u},p="wrapper";function m(e){var n=e.components,t=i(e,["components"]);return Object(l.a)(p,o({},s,t,{components:n,mdxType:"MDXLayout"}),Object(l.a)("h1",null,"GraphQL and TypeScript"))}m.isMDXComponent=!0},34:function(e,n,t){"use strict";t.r(n),t.d(n,"slides",function(){return u}),t.d(n,"fusumaProps",function(){return c}),t.d(n,"default",function(){return m});var a=t(2),r=t.n(a),l=t(1);function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var u=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"About me"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Yosuke Kurami (@Quramy)"),Object(l.a)("li",{parentName:"ul"},"❤️ TypeScript"),Object(l.a)("li",{parentName:"ul"},"Front-end tech adviser at FiNC")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Agenda"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"GraphQL introduction"),Object(l.a)("li",{parentName:"ul"},"TypeScript + GraphQL client dev tips:",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"Type generation"),Object(l.a)("li",{parentName:"ul"},"Ahead of time query parsing"),Object(l.a)("li",{parentName:"ul"},"Editor support")))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"What's GraphQL ?"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"GraphQL is a query language for API"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Describe what’s possible with a ",Object(l.a)("strong",{parentName:"li"},"type system")," (schema)"),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},"Ask for what you need"),", get exactly that"),Object(l.a)("li",{parentName:"ul"},"Get many resources in a single request")),Object(l.a)("p",null,Object(l.a)("a",i({parentName:"p"},{href:"https://graphql.org/"}),"https://graphql.org/")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"Query example (GitHub v4 API)"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-graphql"}),"query MyQuery {\n  viewer {\n    repositories(first: 3, orderBy: { field: STARGAZERS, direction: DESC }) {\n      nodes {\n        url,\n        name,\n        description,\n        languages(first: 1) {\n          nodes {\n            name,\n          }\n        }\n      }\n    }\n  }\n}\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,Object(l.a)("img",i({parentName:"p"},{src:"https://i.gyazo.com/438943ab41d2aa3c1dc069e1882d6d7e.png",alt:"Image from Gyazo"}))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"Query result"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'{\n  "data": {\n    "viewer": {\n      "repositories": {\n        "nodes": [\n          {\n            "url": "https://github.com/Quramy/tsuquyomi",\n            "name": "tsuquyomi",\n            "description": "A Vim plugin for TypeScript",\n            "languages": {\n              "nodes": [\n                {\n                  "name": "Shell"\n                }\n              ]\n            }\n          },\n          {\n            "url": "https://github.com/Quramy/lerna-yarn-workspaces-example",\n            "name": "lerna-yarn-workspaces-example",\n            "description": "How to build TypeScript mono-repo project with yarn and lerna",\n            "languages": {\n              "nodes": [\n                {\n                  "name": "TypeScript"\n                }\n              ]\n            }\n          },\n          {\n            "url": "https://github.com/Quramy/typed-css-modules",\n            "name": "typed-css-modules",\n            "description": "Creates .d.ts files from css-modules .css files",\n            "languages": {\n              "nodes": [\n                {\n                  "name": "JavaScript"\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"JavaScript client libs"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},"Apollo")," (powered by Meteor)"),Object(l.a)("li",{parentName:"ul"},"Relay (powered by Facebook)")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'const clinet = new ApolloClient({\n  link: createHttpLink({\n    uri: "https://api.github.com/graphql",\n    headers: {\n      Authorization: "bearer XXXXXXXXXXXXXXX",\n    },\n  }),\n  cache: new InMemoryCache(),\n});\n\nconst MY_QUERY = gql`query MyQurey { viewer { #...  } }`;\n\nconst { data } = await clinet.query({\n  query: MY_QUERY,\n});\n\nconsole.log(data.viewer);\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"1. What's type of query result ? 🤔"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Generate TypeScript types from GraphQL queries"),Object(l.a)("p",null,Object(l.a)("a",i({parentName:"p"},{href:"https://github.com/apollographql/apollo-tooling"}),"https://github.com/apollographql/apollo-tooling")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"i. Write queries"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'import gql from "graphql-tag";\n\nexport const MY_QUERY = gql`\n  query MyQuery {\n    viewer {\n      repositories(first: 3, orderBy: { field: STARGAZERS, direction: DESC }) {\n        nodes {\n          url,\n          name,\n          description,\n          languages(first: 1) {\n            nodes {\n              name,\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"ii. Run codegen command"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-bash"}),"$ npx apollo client:codegen --target typescript\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"and get generated types"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'/* tslint:disable */\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: MyQuery\n// ====================================================\n\nexport interface MyQuery_viewer_repositories_nodes_languages_nodes {\n  __typename: "Language";\n  /**\n   * The name of the current language.\n   */\n  name: string;\n}\n\nexport interface MyQuery_viewer_repositories_nodes_languages {\n  __typename: "LanguageConnection";\n  /**\n   * A list of nodes.\n   */\n  nodes: (MyQuery_viewer_repositories_nodes_languages_nodes | null)[] | null;\n}\n\nexport interface MyQuery_viewer_repositories_nodes {\n  __typename: "Repository";\n  /**\n   * The HTTP URL for this repository\n   */\n  url: any;\n  /**\n   * The name of the repository.\n   */\n  name: string;\n  /**\n   * The description of the repository.\n   */\n  description: string | null;\n  /**\n   * A list containing a breakdown of the language composition of the repository.\n   */\n  languages: MyQuery_viewer_repositories_nodes_languages | null;\n}\n\nexport interface MyQuery_viewer_repositories {\n  __typename: "RepositoryConnection";\n  /**\n   * A list of nodes.\n   */\n  nodes: (MyQuery_viewer_repositories_nodes | null)[] | null;\n}\n\nexport interface MyQuery_viewer {\n  __typename: "User";\n  /**\n   * A list of repositories that the user owns.\n   */\n  repositories: MyQuery_viewer_repositories;\n}\n\nexport interface MyQuery {\n  /**\n   * The currently authenticated user.\n   */\n  viewer: MyQuery_viewer;\n}\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"iii. Use generated types"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'import { MY_QUERY } from "./query";\nimport { MyQuery } from "./__generated__/MyQuery";\n\n// ...\n\n// Use generated types as type parameter\nconst { data } = await clinet.query<MyQuery>({\n  query: MY_QUERY,\n});\n\nconsole.log(data.viewer); \n')),Object(l.a)("p",null,"😄"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"2. Ahead of time parsing"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"What does ",Object(l.a)("inlineCode",{parentName:"h3"},"gql")," do ?"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'import gql from "graphql-tag";\n\nconst MY_QUERY = gql`\n  query {\n    #...\n  }\n`;\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"It parses query to ",Object(l.a)("strong",{parentName:"h3"},"GraphQL AST at runtime")),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'// parsed GraphQL AST\nconst MY_QUERY = {\n  "kind": "Document",\n  "definitions": [\n    {\n      "kind": "OperationDefinition",\n      "operation": "query",\n      "name": {\n        "kind": "Name",\n        "value": "MyQuery"\n      },\n      "variableDefinitions": [],\n      "directives": [],\n      "selectionSet": { ... },\n    }\n  ]\n};\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"We want to parse in ",Object(l.a)("strong",{parentName:"h3"},"build procedure")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Use TypeScript custom transformer"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Custom transformers ",Object(l.a)("strong",{parentName:"li"},"invades TypeScript compilation"),Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"Public TypeScript API. But not available with ",Object(l.a)("inlineCode",{parentName:"li"},"tsc")," 😢"))),Object(l.a)("li",{parentName:"ul"},Object(l.a)("a",i({parentName:"li"},{href:"https://github.com/firede/ts-transform-graphql-tag"}),"ts-transform-graphql-tag"),Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"It transforms ",Object(l.a)("inlineCode",{parentName:"li"},"gql")," tagged template literals to GraphQL AST")))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Example: with ts-loader"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'const getTransformer = require("ts-transform-graphql-tag").getTransformer\n\nconst config = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        loader: "ts-loader",\n        options: {\n          // ... other loader"s options\n          getCustomTransformers: () => ({ before: [getTransformer()] })\n        }\n      }\n    ]\n  }\n  // ...\n};\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"3. Editor support"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Language service plugin"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"LS plugin extends TypeScript's ",Object(l.a)("strong",{parentName:"li"},"functions for editors")),Object(l.a)("li",{parentName:"ul"},"Configurable with tsconfig.json 😄"),Object(l.a)("li",{parentName:"ul"},"You can customize editor behavior",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"e.g. error checking, completion, etc...")))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"ts-graphql-plugin"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'{\n  "compilerOptions": {\n    "plugins": [\n      {\n        "name": "ts-graphql-plugin",\n        "schema": "schema.json",\n        "tag": "gql"\n      }\n    ],\n    "target": "es2015",\n    // ...\n  }\n}\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,Object(l.a)("img",i({parentName:"p"},{src:"https://raw.githubusercontent.com/Quramy/ts-graphql-plugin/master/capture.gif",alt:null}))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Summary"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Both TypeScript and GraphQL have static type system"),Object(l.a)("li",{parentName:"ul"},"So developer experience depends on static analysis tools")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h1",null,"Thank you ! (and we're hiring 😎 )"))}],c=[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],s={slides:u},p="wrapper";function m(e){var n=e.components,t=o(e,["components"]);return Object(l.a)(p,i({},s,t,{components:n,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"About me"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Yosuke Kurami (@Quramy)"),Object(l.a)("li",{parentName:"ul"},"❤️ TypeScript"),Object(l.a)("li",{parentName:"ul"},"Front-end tech adviser at FiNC")),Object(l.a)("hr",null),Object(l.a)("h2",null,"Agenda"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"GraphQL introduction"),Object(l.a)("li",{parentName:"ul"},"TypeScript + GraphQL client dev tips:",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"Type generation"),Object(l.a)("li",{parentName:"ul"},"Ahead of time query parsing"),Object(l.a)("li",{parentName:"ul"},"Editor support")))),Object(l.a)("hr",null),Object(l.a)("h3",null,"What's GraphQL ?"),Object(l.a)("hr",null),Object(l.a)("h3",null,"GraphQL is a query language for API"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Describe what’s possible with a ",Object(l.a)("strong",{parentName:"li"},"type system")," (schema)"),Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},"Ask for what you need"),", get exactly that"),Object(l.a)("li",{parentName:"ul"},"Get many resources in a single request")),Object(l.a)("p",null,Object(l.a)("a",i({parentName:"p"},{href:"https://graphql.org/"}),"https://graphql.org/")),Object(l.a)("hr",null),Object(l.a)("h4",null,"Query example (GitHub v4 API)"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-graphql"}),"query MyQuery {\n  viewer {\n    repositories(first: 3, orderBy: { field: STARGAZERS, direction: DESC }) {\n      nodes {\n        url,\n        name,\n        description,\n        languages(first: 1) {\n          nodes {\n            name,\n          }\n        }\n      }\n    }\n  }\n}\n")),Object(l.a)("hr",null),Object(l.a)("p",null,Object(l.a)("img",i({parentName:"p"},{src:"https://i.gyazo.com/438943ab41d2aa3c1dc069e1882d6d7e.png",alt:"Image from Gyazo"}))),Object(l.a)("hr",null),Object(l.a)("h4",null,"Query result"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'{\n  "data": {\n    "viewer": {\n      "repositories": {\n        "nodes": [\n          {\n            "url": "https://github.com/Quramy/tsuquyomi",\n            "name": "tsuquyomi",\n            "description": "A Vim plugin for TypeScript",\n            "languages": {\n              "nodes": [\n                {\n                  "name": "Shell"\n                }\n              ]\n            }\n          },\n          {\n            "url": "https://github.com/Quramy/lerna-yarn-workspaces-example",\n            "name": "lerna-yarn-workspaces-example",\n            "description": "How to build TypeScript mono-repo project with yarn and lerna",\n            "languages": {\n              "nodes": [\n                {\n                  "name": "TypeScript"\n                }\n              ]\n            }\n          },\n          {\n            "url": "https://github.com/Quramy/typed-css-modules",\n            "name": "typed-css-modules",\n            "description": "Creates .d.ts files from css-modules .css files",\n            "languages": {\n              "nodes": [\n                {\n                  "name": "JavaScript"\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n')),Object(l.a)("hr",null),Object(l.a)("h2",null,"JavaScript client libs"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("strong",{parentName:"li"},"Apollo")," (powered by Meteor)"),Object(l.a)("li",{parentName:"ul"},"Relay (powered by Facebook)")),Object(l.a)("hr",null),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'const clinet = new ApolloClient({\n  link: createHttpLink({\n    uri: "https://api.github.com/graphql",\n    headers: {\n      Authorization: "bearer XXXXXXXXXXXXXXX",\n    },\n  }),\n  cache: new InMemoryCache(),\n});\n\nconst MY_QUERY = gql`query MyQurey { viewer { #...  } }`;\n\nconst { data } = await clinet.query({\n  query: MY_QUERY,\n});\n\nconsole.log(data.viewer);\n')),Object(l.a)("hr",null),Object(l.a)("h2",null,"1. What's type of query result ? 🤔"),Object(l.a)("hr",null),Object(l.a)("h3",null,"Generate TypeScript types from GraphQL queries"),Object(l.a)("p",null,Object(l.a)("a",i({parentName:"p"},{href:"https://github.com/apollographql/apollo-tooling"}),"https://github.com/apollographql/apollo-tooling")),Object(l.a)("hr",null),Object(l.a)("h4",null,"i. Write queries"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'import gql from "graphql-tag";\n\nexport const MY_QUERY = gql`\n  query MyQuery {\n    viewer {\n      repositories(first: 3, orderBy: { field: STARGAZERS, direction: DESC }) {\n        nodes {\n          url,\n          name,\n          description,\n          languages(first: 1) {\n            nodes {\n              name,\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n')),Object(l.a)("hr",null),Object(l.a)("h4",null,"ii. Run codegen command"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-bash"}),"$ npx apollo client:codegen --target typescript\n")),Object(l.a)("hr",null),Object(l.a)("h4",null,"and get generated types"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'/* tslint:disable */\n// This file was automatically generated and should not be edited.\n\n// ====================================================\n// GraphQL query operation: MyQuery\n// ====================================================\n\nexport interface MyQuery_viewer_repositories_nodes_languages_nodes {\n  __typename: "Language";\n  /**\n   * The name of the current language.\n   */\n  name: string;\n}\n\nexport interface MyQuery_viewer_repositories_nodes_languages {\n  __typename: "LanguageConnection";\n  /**\n   * A list of nodes.\n   */\n  nodes: (MyQuery_viewer_repositories_nodes_languages_nodes | null)[] | null;\n}\n\nexport interface MyQuery_viewer_repositories_nodes {\n  __typename: "Repository";\n  /**\n   * The HTTP URL for this repository\n   */\n  url: any;\n  /**\n   * The name of the repository.\n   */\n  name: string;\n  /**\n   * The description of the repository.\n   */\n  description: string | null;\n  /**\n   * A list containing a breakdown of the language composition of the repository.\n   */\n  languages: MyQuery_viewer_repositories_nodes_languages | null;\n}\n\nexport interface MyQuery_viewer_repositories {\n  __typename: "RepositoryConnection";\n  /**\n   * A list of nodes.\n   */\n  nodes: (MyQuery_viewer_repositories_nodes | null)[] | null;\n}\n\nexport interface MyQuery_viewer {\n  __typename: "User";\n  /**\n   * A list of repositories that the user owns.\n   */\n  repositories: MyQuery_viewer_repositories;\n}\n\nexport interface MyQuery {\n  /**\n   * The currently authenticated user.\n   */\n  viewer: MyQuery_viewer;\n}\n')),Object(l.a)("hr",null),Object(l.a)("h4",null,"iii. Use generated types"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'import { MY_QUERY } from "./query";\nimport { MyQuery } from "./__generated__/MyQuery";\n\n// ...\n\n// Use generated types as type parameter\nconst { data } = await clinet.query<MyQuery>({\n  query: MY_QUERY,\n});\n\nconsole.log(data.viewer); \n')),Object(l.a)("p",null,"😄"),Object(l.a)("hr",null),Object(l.a)("h2",null,"2. Ahead of time parsing"),Object(l.a)("hr",null),Object(l.a)("h3",null,"What does ",Object(l.a)("inlineCode",{parentName:"h3"},"gql")," do ?"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'import gql from "graphql-tag";\n\nconst MY_QUERY = gql`\n  query {\n    #...\n  }\n`;\n')),Object(l.a)("hr",null),Object(l.a)("h3",null,"It parses query to ",Object(l.a)("strong",{parentName:"h3"},"GraphQL AST at runtime")),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'// parsed GraphQL AST\nconst MY_QUERY = {\n  "kind": "Document",\n  "definitions": [\n    {\n      "kind": "OperationDefinition",\n      "operation": "query",\n      "name": {\n        "kind": "Name",\n        "value": "MyQuery"\n      },\n      "variableDefinitions": [],\n      "directives": [],\n      "selectionSet": { ... },\n    }\n  ]\n};\n')),Object(l.a)("hr",null),Object(l.a)("h3",null,"We want to parse in ",Object(l.a)("strong",{parentName:"h3"},"build procedure")),Object(l.a)("hr",null),Object(l.a)("h3",null,"Use TypeScript custom transformer"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Custom transformers ",Object(l.a)("strong",{parentName:"li"},"invades TypeScript compilation"),Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"Public TypeScript API. But not available with ",Object(l.a)("inlineCode",{parentName:"li"},"tsc")," 😢"))),Object(l.a)("li",{parentName:"ul"},Object(l.a)("a",i({parentName:"li"},{href:"https://github.com/firede/ts-transform-graphql-tag"}),"ts-transform-graphql-tag"),Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"It transforms ",Object(l.a)("inlineCode",{parentName:"li"},"gql")," tagged template literals to GraphQL AST")))),Object(l.a)("hr",null),Object(l.a)("h3",null,"Example: with ts-loader"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'const getTransformer = require("ts-transform-graphql-tag").getTransformer\n\nconst config = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        loader: "ts-loader",\n        options: {\n          // ... other loader"s options\n          getCustomTransformers: () => ({ before: [getTransformer()] })\n        }\n      }\n    ]\n  }\n  // ...\n};\n')),Object(l.a)("hr",null),Object(l.a)("h2",null,"3. Editor support"),Object(l.a)("hr",null),Object(l.a)("h3",null,"Language service plugin"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"LS plugin extends TypeScript's ",Object(l.a)("strong",{parentName:"li"},"functions for editors")),Object(l.a)("li",{parentName:"ul"},"Configurable with tsconfig.json 😄"),Object(l.a)("li",{parentName:"ul"},"You can customize editor behavior",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"e.g. error checking, completion, etc...")))),Object(l.a)("hr",null),Object(l.a)("h3",null,"ts-graphql-plugin"),Object(l.a)("pre",null,Object(l.a)("code",i({parentName:"pre"},{className:"language-javascript"}),'{\n  "compilerOptions": {\n    "plugins": [\n      {\n        "name": "ts-graphql-plugin",\n        "schema": "schema.json",\n        "tag": "gql"\n      }\n    ],\n    "target": "es2015",\n    // ...\n  }\n}\n')),Object(l.a)("hr",null),Object(l.a)("p",null,Object(l.a)("img",i({parentName:"p"},{src:"https://raw.githubusercontent.com/Quramy/ts-graphql-plugin/master/capture.gif",alt:null}))),Object(l.a)("hr",null),Object(l.a)("h2",null,"Summary"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Both TypeScript and GraphQL have static type system"),Object(l.a)("li",{parentName:"ul"},"So developer experience depends on static analysis tools")),Object(l.a)("hr",null),Object(l.a)("h1",null,"Thank you ! (and we're hiring 😎 )"))}m.isMDXComponent=!0},36:function(e,n,t){var a=t(37);"string"==typeof a&&(a=[[e.i,a,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(3)(a,r);a.locals&&(e.exports=a.locals)},37:function(e,n,t){}},[[13,5,7]],[0,9]]);